level_linetype <- c()
if("aAbBcC" != "aAbBcC"){
if (length(level_linetype) >1){
data_m$aAbBcC <- factor(data_m$aAbBcC, levels=level_linetype)
}else{
data_m$aAbBcC <- factor(data_m$aAbBcC)
}
}
if("NoMeAnInGTh_I_n_G_s" !="NoMeAnInGTh_I_n_G_s"){
if ("NA" != "NA") {
facet_level <- c(NA)
data_m$NoMeAnInGTh_I_n_G_s <- factor(data_m$NoMeAnInGTh_I_n_G_s,
levels=facet_level, ordered=T)
}else{
data_m$NoMeAnInGTh_I_n_G_s <- factor(data_m$NoMeAnInGTh_I_n_G_s)
}
}
###########  level of x-axis, legend and tag of facet  ###########
############   calculate mean and sd about data_m    ############
s_mean_sd <- function(dat,group_va){
mean_sd_dat <- dat %>% group_by_(.dots=group_va) %>% dplyr::summarise(sd=sd(value),value=mean(value))
return(mean_sd_dat)
}
if ("ctCTct" == "ctCTct"){
if ("aAbBcC" != "aAbBcC"){
if ("NoMeAnInGTh_I_n_G_s" != "NoMeAnInGTh_I_n_G_s") {
data_m <- s_mean_sd(data_m,c("Pos","Pos","aAbBcC","NoMeAnInGTh_I_n_G_s"))
}else{
data_m <- s_mean_sd(data_m,c("Pos","Pos","aAbBcC"))
}
}else{
if ("NoMeAnInGTh_I_n_G_s" != "NoMeAnInGTh_I_n_G_s") {
data_m <- s_mean_sd(data_m,c("Pos","Pos","NoMeAnInGTh_I_n_G_s"))
}else{
data_m <- s_mean_sd(data_m,c("Pos","Pos"))
}
}
}else if("ctCTct" != "ctCTct" && "TRUE" != "FALSE"){
colnames(data_m)[which(colnames(data_m) =="ctCTct")] ='sd'
}
############   calculate mean and sd about data_m    ############
if(!TRUE){
data_m$Pos <- as.numeric(as.character(data_m$Pos))
}
###########                geom layer                  ###########
## basic
if("Pos" == "Pos"){
p <- ggplot(data_m, aes(Pos, value))
}else{
p <- ggplot(data_m, aes(Pos, value, color=Pos))
}
p <- p + xlab("Pos") + ylab("value")+labs(title="")
## layer
if (FALSE){
if("aAbBcC" == 'aAbBcC'){
if("Pos" == "Pos"){
p <- p + geom_smooth(aes(group=1),method="auto",se=FALSE,size=0.5)
}else{
p <- p + geom_smooth(aes(linetype=aAbBcC,group=Pos),method="auto",se=FALSE,size=0.5)
}
}else{
if("Pos" == "Pos"){
p <- p + geom_smooth(aes(linetype=aAbBcC,group=aAbBcC),method="auto",se=FALSE,size=0.5)
}else{
p <- p + geom_smooth(aes(linetype=aAbBcC,group=interaction(Pos,aAbBcC)),method="auto",se=FALSE,size=0.5)
}
}
}else{
if("aAbBcC" == 'aAbBcC'){
if("Pos" == "Pos" ){
p <- p + geom_line(aes(group=1),size=0.5)
}else{
p <- p + geom_line(aes(linetype=aAbBcC,group=Pos),size=0.5)
}
}else{
if("Pos" == "Pos" ){
p <- p + geom_line(aes(linetype=aAbBcC,group=aAbBcC),size=0.5)
}else{
p <- p + geom_line(aes(linetype=aAbBcC,group=interaction(Pos,aAbBcC)),size=0.5)
}
}
}
p
data_m$Pos
## Whether add point
if("TRUE" != "FALSE"){
if("aAbBcC" == 'aAbBcC'){
if("Pos" == "Pos"){
p <- p+geom_point(shape=15)
}else{
p <- p+geom_point(aes(shape=Pos))
}
}else{
if("Pos" == "Pos"){
p <- p+geom_point(aes(shape=aAbBcC))
}else{
p <- p+geom_point(aes(shape=Pos))
}
}
}
## error_bar
if("TRUE" != "FALSE"){
if("Pos" == "Pos"){
p <- p + geom_errorbar(aes(ymin=value-sd,ymax=value+sd, group=1), colour="black", width=0.2, position=position_dodge(width=))
}else{
p <- p + geom_errorbar(aes(ymin=value-sd,ymax=value+sd, group=Pos), colour="black", width=0.2, position=position_dodge(width=))
}
}
### xtics limit and label
xtics_limit <- c(FALSE)
xtics_label <- c(FALSE)
if ("discrete" == "continuous"){
if("FALSE" != "FALSE" & "FALSE" != "FALSE"){
p <- p + scale_x_continuous(limits=xtics_limit, breaks=xtics_label, labels=xtics_label)
}else if("FALSE" != "FALSE" & "FALSE" == "FALSE"){
p <- p + scale_x_continuous(limits=xtics_limit)
}else if("FALSE" == "FALSE" & "FALSE" != "FALSE"){
p <- p + scale_x_continuous(breaks=xtics_label, labels=xtics_label)
}
}
# else{
#   if("FALSE" != "FALSE" && "FALSE" != "FALSE"){
#       p <- p + scale_x_discrete(limits=xtics_limit, labels=xtics_label)
#   }else if("FALSE" != "FALSE" && "FALSE" == "FALSE"){
#       p <- p + scale_x_discrete(limits=xtics_limit)
#   }else if("FALSE" == "FALSE" && "FALSE" != "FALSE"){
#       p <- p + scale_x_discrete(labels=xtics_label)
#   }
# }
### vline
vline_vector <- c(FALSE)
if("FALSE" != 'FALSE'){
p <- p + geom_vline(xintercept=hline_vector,
linetype="dotted", color="black", size=0.5)
}
### hline
hline_vector <- c(FALSE)
if("FALSE" != 'FALSE'){
p <- p + geom_hline(yintercept=hline_vector,
linetype="dotted", color="black", size=0.5)
}
### manunal change color
if("FALSE" != "FALSE"){
p <- p + scale_colour_manual(values=c(FALSE))
}
### coord_flip
if (FALSE) {
p <- p + coord_flip()
}
if ("NoMeAnInGTh_I_n_G_s" != "NoMeAnInGTh_I_n_G_s") {
if("v" == 'h') {
p <- p + facet_grid( .~ NoMeAnInGTh_I_n_G_s,scales="free")
}else if("v" == 'v') {
p <- p + facet_grid( NoMeAnInGTh_I_n_G_s~. ,scales="free")
}else{
print("-M should choose one of (h,v)")
}
}
#add additional ggplot2 supported commands
p <- p
#select theme
p <- p + theme_classic2()
###########                geom layer                ###########
###########                  output                  ###########
#Correcting location of x-aixs label
p <- Xlable_angle_correct(p, 0)
#Set the position of legend
p <- LegendPos(p, "right")
#control margin of plot
p <- PLot_margin(p, '', 'Pos', 'value')
#plot width and height auto calculate
w_h_auto <-Plot_size_final(length(unique(data_m$Pos)),"FALSE","right","Pos", "Pos", "NoMeAnInGTh_I_n_G_s", "v", nlevels(data_m$NoMeAnInGTh_I_n_G_s))
w_auto <- w_h_auto[1]
h_auto <- w_h_auto[2]
#output
Plot_savefig('/opt/bin/s-plot/example/line/line.melt.data_temp.line.errorBar.addPoint_Pos.linetype_aAbBcC.x_Pos.y_value.pdf', p, FALSE, FALSE, w_auto, h_auto, 300, "FALSE",ftype='pdf')
source('/opt/bin/s-plot/rFunction.R')
library(ggplot2)
library(reshape2)
library(grid)
library(naturalsort)
library(dplyr)
if ("FALSE" != "FALSE") {
sampleGroup <- read.table("FALSE",sep="\t",header=1,check.names=F,row.names=1)
sampleGroup$variable<- factor(rownames(sampleGroup))
}
if(! TRUE){
if ("FALSE" != "FALSE") {
data <- read.table(file="line.melt.data_temp", sep="\t", header=TRUE, quote="", check.names=F)
gene_temp=strsplit("FALSE",":")[[1]]
data_m <- as.data.frame(t(data[data[gene_temp[1]]==gene_temp[2],]),stringsAsFactors=F)
colnames(data_m)<-"value"
data_m$Sample = rownames(data_m)
data_m<- data_m[-1:-1,]
data_m$value <- as.numeric(data_m$value)
if ("FALSE" != "FALSE") {
data_m <- merge(data_m, sampleGroup, by="row.names")
}
if ("Pos" == "Sample") {
print("Wainning: Because per x-axis tag contains only one data, so recommend you to use the scatterplot or lines script")
}
}else {
data <- read.table(file="line.melt.data_temp", sep="\t", header=TRUE, quote="", check.names=F)
data_m <- melt(data)
if ("FALSE" != "FALSE") {
data_m <-left_join(data_m,sampleGroup,by="variable")
}
}
data_m <- data_m[data_m$value !=0,]
} else {
data_m <- read.table(file="line.melt.data_temp", sep="\t",
header=TRUE, quote="")
}
if (0 != 0){
data_m$value <- data_m$value + 0
}
if("FALSE" !="FALSE"){
data_m$value <- FALSE(data_m$value)
}
naturalsort(unique(data_m$Pos))
naturalsort(data_m$Pos)
naturalsort(data_m$Pos)
data_m$Pos
factor(data_m$Pos)
source('/opt/bin/s-plot/rFunction.R')
library(ggplot2)
library(reshape2)
library(grid)
library(naturalsort)
library(dplyr)
if ("FALSE" != "FALSE") {
sampleGroup <- read.table("FALSE",sep="\t",header=1,check.names=F,row.names=1)
sampleGroup$variable<- factor(rownames(sampleGroup))
}
if(! TRUE){
if ("FALSE" != "FALSE") {
data <- read.table(file="line.melt.data_temp", sep="\t", header=TRUE, quote="", check.names=F)
gene_temp=strsplit("FALSE",":")[[1]]
data_m <- as.data.frame(t(data[data[gene_temp[1]]==gene_temp[2],]),stringsAsFactors=F)
colnames(data_m)<-"value"
data_m$Sample = rownames(data_m)
data_m<- data_m[-1:-1,]
data_m$value <- as.numeric(data_m$value)
if ("FALSE" != "FALSE") {
data_m <- merge(data_m, sampleGroup, by="row.names")
}
if ("Pos" == "Sample") {
print("Wainning: Because per x-axis tag contains only one data, so recommend you to use the scatterplot or lines script")
}
}else {
data <- read.table(file="line.melt.data_temp", sep="\t", header=TRUE, quote="", check.names=F)
data_m <- melt(data)
if ("FALSE" != "FALSE") {
data_m <-left_join(data_m,sampleGroup,by="variable")
}
}
data_m <- data_m[data_m$value !=0,]
} else {
data_m <- read.table(file="line.melt.data_temp", sep="\t",
header=TRUE, quote="")
}
if (0 != 0){
data_m$value <- data_m$value + 0
}
if("FALSE" !="FALSE"){
data_m$value <- FALSE(data_m$value)
}
if(TRUE){
x_level <- c()
if (length(x_level)>1){
data_m$Pos <- factor(data_m$Pos,levels=x_level)
}else{
# data_m$Pos <- as.character(data_m$Pos)
data_m$Pos <- factor(data_m$Pos)
# data_m$Pos <- ordered(data_m$Pos, levels=naturalsort(unique(data_m$Pos)))
}
}else{
data_m$Pos <- as.numeric(data_m$Pos)
}
level_i <- c()
if (length(level_i) >1){
data_m$Pos <- factor(data_m$Pos, levels=level_i)
}else{
data_m$Pos <- factor(data_m$Pos)
}
data_m$pos
data_m$Pos
level_linetype <- c()
if("aAbBcC" != "aAbBcC"){
if (length(level_linetype) >1){
data_m$aAbBcC <- factor(data_m$aAbBcC, levels=level_linetype)
}else{
data_m$aAbBcC <- factor(data_m$aAbBcC)
}
}
if("NoMeAnInGTh_I_n_G_s" !="NoMeAnInGTh_I_n_G_s"){
if ("NA" != "NA") {
facet_level <- c(NA)
data_m$NoMeAnInGTh_I_n_G_s <- factor(data_m$NoMeAnInGTh_I_n_G_s,
levels=facet_level, ordered=T)
}else{
data_m$NoMeAnInGTh_I_n_G_s <- factor(data_m$NoMeAnInGTh_I_n_G_s)
}
}
s_mean_sd <- function(dat,group_va){
mean_sd_dat <- dat %>% group_by_(.dots=group_va) %>% dplyr::summarise(sd=sd(value),value=mean(value))
return(mean_sd_dat)
}
if ("ctCTct" == "ctCTct"){
if ("aAbBcC" != "aAbBcC"){
if ("NoMeAnInGTh_I_n_G_s" != "NoMeAnInGTh_I_n_G_s") {
data_m <- s_mean_sd(data_m,c("Pos","Pos","aAbBcC","NoMeAnInGTh_I_n_G_s"))
}else{
data_m <- s_mean_sd(data_m,c("Pos","Pos","aAbBcC"))
}
}else{
if ("NoMeAnInGTh_I_n_G_s" != "NoMeAnInGTh_I_n_G_s") {
data_m <- s_mean_sd(data_m,c("Pos","Pos","NoMeAnInGTh_I_n_G_s"))
}else{
data_m <- s_mean_sd(data_m,c("Pos","Pos"))
}
}
}else if("ctCTct" != "ctCTct" && "TRUE" != "FALSE"){
colnames(data_m)[which(colnames(data_m) =="ctCTct")] ='sd'
}
if(!TRUE){
data_m$Pos <- as.numeric(as.character(data_m$Pos))
}
data_m$Pos
if("Pos" == "Pos"){
p <- ggplot(data_m, aes(Pos, value))
}else{
p <- ggplot(data_m, aes(Pos, value, color=Pos))
}
p <- p + xlab("Pos") + ylab("value")+labs(title="")
if (FALSE){
if("aAbBcC" == 'aAbBcC'){
if("Pos" == "Pos"){
p <- p + geom_smooth(aes(group=1),method="auto",se=FALSE,size=0.5)
}else{
p <- p + geom_smooth(aes(linetype=aAbBcC,group=Pos),method="auto",se=FALSE,size=0.5)
}
}else{
if("Pos" == "Pos"){
p <- p + geom_smooth(aes(linetype=aAbBcC,group=aAbBcC),method="auto",se=FALSE,size=0.5)
}else{
p <- p + geom_smooth(aes(linetype=aAbBcC,group=interaction(Pos,aAbBcC)),method="auto",se=FALSE,size=0.5)
}
}
}else{
if("aAbBcC" == 'aAbBcC'){
if("Pos" == "Pos" ){
p <- p + geom_line(aes(group=1),size=0.5)
}else{
p <- p + geom_line(aes(linetype=aAbBcC,group=Pos),size=0.5)
}
}else{
if("Pos" == "Pos" ){
p <- p + geom_line(aes(linetype=aAbBcC,group=aAbBcC),size=0.5)
}else{
p <- p + geom_line(aes(linetype=aAbBcC,group=interaction(Pos,aAbBcC)),size=0.5)
}
}
}
p
source('/opt/bin/s-plot/rFunction.R')
library(ggplot2)
library(reshape2)
library(grid)
library(dplyr)
library(naturalsort)
if ("FALSE" != "FALSE") {
sampleGroup <- read.table("FALSE",sep="\t",header=1,check.names=F,row.names=1)
sampleGroup$variable<- factor(rownames(sampleGroup))
}
if(! TRUE){
if ("FALSE" != "FALSE") {
data <- read.table(file="line.melt.data_temp", sep="\t", header=TRUE, quote="", check.names=F)
gene_temp=strsplit("FALSE",":")[[1]]
data_m <- as.data.frame(t(data[data[gene_temp[1]]==gene_temp[2],]),stringsAsFactors=F)
colnames(data_m)<-"value"
data_m$Sample = rownames(data_m)
data_m<- data_m[-1:-1,]
data_m$value <- as.numeric(data_m$value)
if ("FALSE" != "FALSE") {
data_m <- merge(data_m, sampleGroup, by="row.names")
}
if ("Pos" == "Sample") {
print("Wainning: Because per x-axis tag contains only one data, so recommend you to use the scatterplot or lines script")
}
}else {
data <- read.table(file="line.melt.data_temp", sep="\t", header=TRUE, quote="", check.names=F)
data_m <- melt(data)
if ("FALSE" != "FALSE") {
data_m <-left_join(data_m,sampleGroup,by="variable")
}
}
data_m <- data_m[data_m$value !=0,]
} else {
data_m <- read.table(file="line.melt.data_temp", sep="\t",
header=TRUE, quote="")
}
if (0 != 0){
data_m$value <- data_m$value + 0
}
if("FALSE" !="FALSE"){
data_m$value <- FALSE(data_m$value)
}
s_mean_sd <- function(dat,group_va){
mean_sd_dat <- dat %>% group_by_(.dots=group_va) %>% dplyr::summarise(sd=sd(value),value=mean(value))
return(mean_sd_dat)
}
if ("ctCTct" == "ctCTct"){
if ("aAbBcC" != "aAbBcC"){
if ("NoMeAnInGTh_I_n_G_s" != "NoMeAnInGTh_I_n_G_s") {
data_m <- s_mean_sd(data_m,c("Pos","Pos","aAbBcC","NoMeAnInGTh_I_n_G_s"))
}else{
data_m <- s_mean_sd(data_m,c("Pos","Pos","aAbBcC"))
}
}else{
if ("NoMeAnInGTh_I_n_G_s" != "NoMeAnInGTh_I_n_G_s") {
data_m <- s_mean_sd(data_m,c("Pos","Pos","NoMeAnInGTh_I_n_G_s"))
}else{
data_m <- s_mean_sd(data_m,c("Pos","Pos"))
}
}
}else if("ctCTct" != "ctCTct" && "TRUE" != "FALSE"){
colnames(data_m)[which(colnames(data_m) =="ctCTct")] ='sd'
}
data_m$Pos
if("Pos" == "Pos"){
p <- ggplot(data_m, aes(Pos, value))
}else{
p <- ggplot(data_m, aes(Pos, value, color=Pos))
}
p <- p + xlab("Pos") + ylab("value")+labs(title="")
if (FALSE){
if("aAbBcC" == 'aAbBcC'){
if("Pos" == "Pos"){
p <- p + geom_smooth(aes(group=1),method="auto",se=FALSE,size=0.5)
}else{
p <- p + geom_smooth(aes(linetype=aAbBcC,group=Pos),method="auto",se=FALSE,size=0.5)
}
}else{
if("Pos" == "Pos"){
p <- p + geom_smooth(aes(linetype=aAbBcC,group=aAbBcC),method="auto",se=FALSE,size=0.5)
}else{
p <- p + geom_smooth(aes(linetype=aAbBcC,group=interaction(Pos,aAbBcC)),method="auto",se=FALSE,size=0.5)
}
}
}else{
if("aAbBcC" == 'aAbBcC'){
if("Pos" == "Pos" ){
p <- p + geom_line(aes(group=1),size=0.5)
}else{
p <- p + geom_line(aes(linetype=aAbBcC,group=Pos),size=0.5)
}
}else{
if("Pos" == "Pos" ){
p <- p + geom_line(aes(linetype=aAbBcC,group=aAbBcC),size=0.5)
}else{
p <- p + geom_line(aes(linetype=aAbBcC,group=interaction(Pos,aAbBcC)),size=0.5)
}
}
}
p
data_m$Pos <- as.character(data_m$Pos)
if("Pos" == "Pos"){
p <- ggplot(data_m, aes(Pos, value))
}else{
p <- ggplot(data_m, aes(Pos, value, color=Pos))
}
p <- p + xlab("Pos") + ylab("value")+labs(title="")
if (FALSE){
if("aAbBcC" == 'aAbBcC'){
if("Pos" == "Pos"){
p <- p + geom_smooth(aes(group=1),method="auto",se=FALSE,size=0.5)
}else{
p <- p + geom_smooth(aes(linetype=aAbBcC,group=Pos),method="auto",se=FALSE,size=0.5)
}
}else{
if("Pos" == "Pos"){
p <- p + geom_smooth(aes(linetype=aAbBcC,group=aAbBcC),method="auto",se=FALSE,size=0.5)
}else{
p <- p + geom_smooth(aes(linetype=aAbBcC,group=interaction(Pos,aAbBcC)),method="auto",se=FALSE,size=0.5)
}
}
}else{
if("aAbBcC" == 'aAbBcC'){
if("Pos" == "Pos" ){
p <- p + geom_line(aes(group=1),size=0.5)
}else{
p <- p + geom_line(aes(linetype=aAbBcC,group=Pos),size=0.5)
}
}else{
if("Pos" == "Pos" ){
p <- p + geom_line(aes(linetype=aAbBcC,group=aAbBcC),size=0.5)
}else{
p <- p + geom_line(aes(linetype=aAbBcC,group=interaction(Pos,aAbBcC)),size=0.5)
}
}
}
p
?scale_x_continuous
p
p+scale_x_discrete(limits=c('-1000','3000'))
p
p+scale_x_discrete(limits=c('-1000','3000'),labels=c('-1000','-3000','0','1000','3000'))
?scale_x_discrete
p+scale_x_continuous(limits=c('-1000','3000'),labels=c('-1000','-3000','0','1000','3000'))
p+scale_x_continuou(labels=c('-1000','-3000','0','1000','3000'))
p+scale_x_continuous(labels=c('-1000','-3000','0','1000','3000'))
