if (length(label.col) == 1) {
label.col <- rep(label.col, 15)
}
else if (length(label.col) != 15) {
flog.error("Unexpected parameter length for 'label.col'",
name = "VennDiagramLogger")
stop("Unexpected parameter length for 'label.col'")
}
if (length(cex) == 1) {
cex <- rep(cex, 15)
}
else if (length(cex) != 15) {
flog.error("Unexpected parameter length for 'cex'", name = "VennDiagramLogger")
stop("Unexpected parameter length for 'cex'")
}
if (length(fontface) == 1) {
fontface <- rep(fontface, 15)
}
else if (length(fontface) != 15) {
flog.error("Unexpected parameter length for 'fontface'",
name = "VennDiagramLogger")
stop("Unexpected parameter length for 'fontface'")
}
if (length(fontfamily) == 1) {
fontfamily <- rep(fontfamily, 15)
}
else if (length(fontfamily) != 15) {
flog.error("Unexpected parameter length for 'fontfamily'",
name = "VennDiagramLogger")
stop("Unexpected parameter length for 'fontfamily'")
}
if (length(fill) == 1) {
fill <- rep(fill, 4)
}
else if (length(fill) != 4 & length(fill) != 0) {
flog.error("Unexpected parameter length for 'fill'",
name = "VennDiagramLogger")
stop("Unexpected parameter length for 'fill'")
}
if (length(alpha) == 1) {
alpha <- rep(alpha, 4)
}
else if (length(alpha) != 4 & length(alpha) != 0) {
flog.error("Unexpected parameter length for 'alpha'",
name = "VennDiagramLogger")
stop("Unexpected parameter length for 'alpha'")
}
if (length(cat.pos) == 1) {
cat.pos <- rep(cat.pos, 4)
}
else if (length(cat.pos) != 4) {
flog.error("Unexpected parameter length for 'cat.pos'",
name = "VennDiagramLogger")
stop("Unexpected parameter length for 'cat.pos'")
}
if (length(cat.dist) == 1) {
cat.dist <- rep(cat.dist, 4)
}
else if (length(cat.dist) != 4) {
flog.error("Unexpected parameter length for 'cat.dist'",
name = "VennDiagramLogger")
stop("Unexpected parameter length for 'cat.dist'")
}
if (length(cat.col) == 1) {
cat.col <- rep(cat.col, 4)
}
else if (length(cat.col) != 4) {
flog.error("Unexpected parameter length for 'cat.col'",
name = "VennDiagramLogger")
stop("Unexpected parameter length for 'cat.col'")
}
if (length(cat.cex) == 1) {
cat.cex <- rep(cat.cex, 4)
}
else if (length(cat.cex) != 4) {
flog.error("Unexpected parameter length for 'cat.cex'",
name = "VennDiagramLogger")
stop("Unexpected parameter length for 'cat.cex'")
}
if (length(cat.fontface) == 1) {
cat.fontface <- rep(cat.fontface, 4)
}
else if (length(cat.fontface) != 4) {
flog.error("Unexpected parameter length for 'cat.fontface'",
name = "VennDiagramLogger")
stop("Unexpected parameter length for 'cat.fontface'")
}
if (length(cat.fontfamily) == 1) {
cat.fontfamily <- rep(cat.fontfamily, 4)
}
else if (length(cat.fontfamily) != 4) {
flog.error("Unexpected parameter length for 'cat.fontfamily'",
name = "VennDiagramLogger")
stop("Unexpected parameter length for 'cat.fontfamily'")
}
if (!(class(cat.just) == "list" & length(cat.just) == 4 &
length(cat.just[[1]]) == 2 & length(cat.just[[2]]) ==
2 & length(cat.just[[3]]) == 2 & length(cat.just[[4]]) ==
2)) {
flog.error("Unexpected parameter format for 'cat.just'",
name = "VennDiagramLogger")
stop("Unexpected parameter format for 'cat.just'")
}
cat.pos <- cat.pos + rotation.degree
if (direct.area) {
areas <- area.vector
for (i in 1:15) {
assign(paste("a", i, sep = ""), area.vector[i])
}
}
else {
a6 <- n1234
a12 <- n123 - a6
a11 <- n124 - a6
a5 <- n134 - a6
a7 <- n234 - a6
a15 <- n12 - a6 - a11 - a12
a4 <- n13 - a6 - a5 - a12
a10 <- n14 - a6 - a5 - a11
a13 <- n23 - a6 - a7 - a12
a8 <- n24 - a6 - a7 - a11
a2 <- n34 - a6 - a5 - a7
a9 <- area1 - a4 - a5 - a6 - a10 - a11 - a12 - a15
a14 <- area2 - a6 - a7 - a8 - a11 - a12 - a13 - a15
a1 <- area3 - a2 - a4 - a5 - a6 - a7 - a12 - a13
a3 <- area4 - a2 - a5 - a6 - a7 - a8 - a10 - a11
areas <- c(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11,
a12, a13, a14, a15)
}
areas.error <- c("a1  <- area3 - a2 - a4 - a5 - a6 - a7 - a12 - a13",
"a2  <- n34 - a6 - a5 - a7", "a3  <- area4 - a2 - a5 - a6 - a7 - a8 - a10 - a11",
"a4  <- n13 - a6 - a5 - a12", "a5  <- n134 - a6", "a6  <- n1234",
"a7  <- n234 - a6", "a8  <- n24 - a6 - a7 - a11", "a9  <- area1 - a4 - a5 - a6 - a10 - a11 - a12 - a15",
"a10 <- n14 - a6 - a5 - a11", "a11 <- n124 - a6", "a12 <- n123 - a6",
"a15 <- n12 - a6 - a11 - a12", "a13 <- n23 - a6 - a7 - a12",
"a14 <- area2 - a6 - a7 - a8 - a11 - a12 - a13 - a15")
for (i in 1:length(areas)) {
if (areas[i] < 0) {
flog.error(paste("Impossible:", areas.error[i], "produces negative area"),
name = "VennDiagramLogger")
stop(paste("Impossible:", areas.error[i], "produces negative area"))
}
}
if (length(cex.prop) > 0) {
# if (length(cex.prop) != 1)
# flog.error("Value passed to cex.prop is not length 1",
# name = "VennDiagramLogger")
# stop("Value passed to cex.prop is not length 1")
func = cex.prop
if (class(cex.prop) != "function") {
if (cex.prop == "lin") {
func = function(x) x
}
else if (cex.prop == "log10") {
func = log10
}
else flog.error(paste0("Unknown value passed to cex.prop: ",
cex.prop), name = "VennDiagramLogger")
stop(paste0("Unknown value passed to cex.prop: ",
cex.prop))
}
maxArea = max(areas)
for (i in 1:length(areas)) {
cex[i] = cex[i] * func(areas[i])/func(maxArea)
if (cex[i] <= 0)
stop(paste0("Error in rescaling of area labels: the label of area ",
i, " is less than or equal to zero"))
}
}
grob.list <- gList()
ellipse.positions <- matrix(nrow = 4, ncol = 7)
colnames(ellipse.positions) <- c("x", "y", "a", "b", "rotation",
"fill.mapping", "line.mapping")
ellipse.positions[1, ] <- c(0.65, 0.47, 0.35, 0.2, 45, 2,
4)
ellipse.positions[2, ] <- c(0.35, 0.47, 0.35, 0.2, 135, 1,
1)
ellipse.positions[3, ] <- c(0.5, 0.57, 0.33, 0.15, 45, 4,
3)
ellipse.positions[4, ] <- c(0.5, 0.57, 0.35, 0.15, 135, 3,
2)
for (i in 1:4) {
grob.list <- gList(grob.list, VennDiagram::ellipse(x = ellipse.positions[i,
"x"], y = ellipse.positions[i, "y"], a = ellipse.positions[i,
"a"], b = ellipse.positions[i, "b"], rotation = ellipse.positions[i,
"rotation"], gp = gpar(lty = 0, fill = fill[ellipse.positions[i,
"fill.mapping"]], alpha = alpha[ellipse.positions[i,
"fill.mapping"]])))
}
for (i in 1:4) {
grob.list <- gList(grob.list, ellipse(x = ellipse.positions[i,
"x"], y = ellipse.positions[i, "y"], a = ellipse.positions[i,
"a"], b = ellipse.positions[i, "b"], rotation = ellipse.positions[i,
"rotation"], gp = gpar(lwd = lwd[ellipse.positions[i,
"line.mapping"]], lty = lty[ellipse.positions[i,
"line.mapping"]], col = col[ellipse.positions[i,
"line.mapping"]], fill = "transparent")))
}
label.matrix <- matrix(nrow = 15, ncol = 3)
colnames(label.matrix) <- c("label", "x", "y")
label.matrix[1, ] <- c(a1, 0.35, 0.77)
label.matrix[2, ] <- c(a2, 0.5, 0.69)
label.matrix[3, ] <- c(a3, 0.65, 0.77)
label.matrix[4, ] <- c(a4, 0.31, 0.67)
label.matrix[5, ] <- c(a5, 0.4, 0.58)
label.matrix[6, ] <- c(a6, 0.5, 0.47)
label.matrix[7, ] <- c(a7, 0.6, 0.58)
label.matrix[8, ] <- c(a8, 0.69, 0.67)
label.matrix[9, ] <- c(a9, 0.18, 0.58)
label.matrix[10, ] <- c(a10, 0.32, 0.42)
label.matrix[11, ] <- c(a11, 0.425, 0.38)
label.matrix[12, ] <- c(a12, 0.575, 0.38)
label.matrix[13, ] <- c(a13, 0.68, 0.42)
label.matrix[14, ] <- c(a14, 0.82, 0.58)
label.matrix[15, ] <- c(a15, 0.5, 0.28)
processedLabels <- rep("", length(label.matrix[, "label"]))
if (print.mode[1] == "percent") {
processedLabels <- paste(signif(label.matrix[, "label"]/sum(label.matrix[,
"label"]) * 100, digits = sigdigs), "%", sep = "")
if (isTRUE(print.mode[2] == "raw")) {
processedLabels <- paste(processedLabels, "\n(",
label.matrix[, "label"], ")", sep = "")
}
}
if (print.mode[1] == "raw") {
processedLabels <- label.matrix[, "label"]
if (isTRUE(print.mode[2] == "percent")) {
processedLabels <- paste(processedLabels, "\n(",
paste(signif(label.matrix[, "label"]/sum(label.matrix[,
"label"]) * 100, digits = sigdigs), "%)", sep = ""),
sep = "")
}
}
for (i in 1:nrow(label.matrix)) {
grob.list <- gList(grob.list, textGrob(label = processedLabels[i],
x = label.matrix[i, "x"], y = label.matrix[i, "y"],
gp = gpar(col = label.col[i], cex = cex[i], fontface = fontface[i],
fontfamily = fontfamily[i])))
}
cat.pos.x <- c(0.18, 0.82, 0.35, 0.65)
cat.pos.y <- c(0.58, 0.58, 0.77, 0.77)
for (i in 1:4) {
this.cat.pos <- find.cat.pos(x = cat.pos.x[i], y = cat.pos.y[i],
pos = cat.pos[i], dist = cat.dist[i])
grob.list <- gList(grob.list, textGrob(label = category[i],
x = this.cat.pos$x, y = this.cat.pos$y, just = cat.just[[i]],
gp = gpar(col = cat.col[i], cex = cat.cex[i], fontface = cat.fontface[i],
fontfamily = cat.fontfamily[i])))
}
grob.list <- VennDiagram::adjust.venn(VennDiagram::rotate.venn.degrees(grob.list,
rotation.degree, rotation.centre[1], rotation.centre[2]),
...)
if (ind) {
grid.draw(grob.list)
}
return(grob.list)
}
assignInNamespace("draw.quad.venn",draw.quad.venn, ns="VennDiagram")
oneName <- function() paste(sample(LETTERS,5,replace=TRUE),collapse="")
geneNames <- replicate(1000, oneName())
GroupA <- sample(geneNames, 400, replace=FALSE)
GroupB <- sample(geneNames, 750, replace=FALSE)
GroupC <- sample(geneNames, 250, replace=FALSE)
GroupD <- sample(geneNames, 300, replace=FALSE)
library(VennDiagram)
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='lin', cex=2)
source("/opt/bin/s-plot/bin/VennDiagram_revision.R")
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='lin', cex=2)
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=2)
assignInNamespace("draw.quad.venn",draw.quad.venn, ns="VennDiagram")
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=2)
assignInNamespace("draw.quad.venn",draw.quad.venn, ns="VennDiagram")
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=2)
draw.quad.venn
rm(list=ls())
library(VennDiagram)
draw.quad.venn
source("/opt/bin/s-plot/bin/VennDiagram_revision.R")
source("/opt/bin/s-plot/bin/VennDiagram_revision.R")
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=2)
oneName <- function() paste(sample(LETTERS,5,replace=TRUE),collapse="")
geneNames <- replicate(1000, oneName())
GroupA <- sample(geneNames, 400, replace=FALSE)
GroupB <- sample(geneNames, 750, replace=FALSE)
GroupC <- sample(geneNames, 250, replace=FALSE)
GroupD <- sample(geneNames, 300, replace=FALSE)
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=2)
source("/opt/bin/s-plot/bin/VennDiagram_revision.R")
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=2)
grid.newpage()
grid.draw(v1)
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='lin', cex=2)
grid.newpage()
grid.draw(v1)
draw.pairwise.venn
ls
ls()
draw.pairwise.venn
ls()
draw.triple.venn
draw.quintuple.venn
ls()
draw.quintuple.venn
source("/opt/bin/s-plot/bin/VennDiagram_revision.R")
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=2)
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=2)
grid.newpage()
grid.draw(v1)
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=1)
grid.newpage()
grid.draw(v1)
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='NULL', cex=1)
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop=NULL, cex=1)
library(VennDiagram)
?draw.pairwise.venn()
1:10
log10(1:10)
log10(c(1:4:8))
log10(c(1,4,8))
lin(c(1,4,8))
log2(c(1,4,8))
log2(c(4,8))
log10(c(4,8))
sqrt(c(4,8))
library(rgl)
library(scatterplot3d)
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=c(1))),pch=as.numeric(as.factor(mtcars$cyl)),cex.symbols=NULL)
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,pch=as.numeric(as.factor(mtcars$cyl)),cex.symbols=NULL)
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=mtcars$,pch=as.numeric(mtcars$cyl),cex.symbols=NULL)
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=mtcars$cyl,pch=as.numeric(mtcars$cyl),cex.symbols=NULL)
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=mtcars$am,pch=as.numeric(mtcars$cyl),cex.symbols=NULL)
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am),pch=as.numeric(mtcars$cyl),cex.symbols=NULL)
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,pch=as.numeric(as.factor(mtcars$cyl)),cex.symbols=NULL)
dim(mtcars)
as.numeric(as.factor(mtcars$cyl))
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am),pch=as.numeric(mtcars$cyl),cex.symbols=NULL)
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,pch=as.numeric(as.factor(mtcars$cyl)),cex.symbols=NULL)
dim(mtcars)
as.numeric(as.factor(mtcars$cyl))
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am)),pch=as.numeric(mtcars$cyl),cex.symbols=NULL)
?scatterplot3d
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,pch=as.numeric(as.factor(mtcars$cyl)),cex.symbols=NULL,type='p')
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am)),pch=as.numeric(mtcars$cyl),cex.symbols=NULL)
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am)),pch=as.numeric(mtcars$cyl),cex.symbols=NULL,type="h")
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am)),pch=as.numeric(mtcars$cyl),cex.symbols=NULL,type="l")
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am)),pch=as.numeric(mtcars$cyl),cex.symbols=NULL,type="s")
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am)),pch=as.numeric(mtcars$cyl),cex.symbols=NULL,type="p')
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,pch=as.numeric(as.factor(mtcars$cyl)),cex.symbols=NULL,type='p')
dim(mtcars)
as.numeric(as.factor(mtcars$cyl))
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am)),pch=as.numeric(mtcars$cyl),cex.symbols=NULL,type="p")
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am)),pch=as.numeric(mtcars$cyl),cex.symbols=NULL,type="p")
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am)),pch=as.numeric(mtcars$cyl),cex.symbols=NULL,type="p",highlight.3d = T)
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am)),pch=as.numeric(mtcars$cyl),cex.symbols=NULL,type="p",highlight.3d = TRUE)
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am)),pch=as.numeric(mtcars$cyl),cex.symbols=NULL,type="H",highlight.3d = TRUE)
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am)),pch=as.numeric(mtcars$cyl),cex.symbols=NULL,type="h",highlight.3d = TRUE)
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am)),pch=as.numeric(mtcars$cyl),cex.symbols=NULL,type="h")
.libPaths()
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am)),pch=as.numeric(mtcars$cyl),cex.symbols=NULL,type="h")
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am)),pch=NULL,cex.symbols=NULL,type="h")
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=as.numeric(as.factor(mtcars$am)),pch=1,cex.symbols=NULL,type="h")
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=NULL,pch=1,cex.symbols=NULL,type="h")
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color=1,pch=1,cex.symbols=NULL,type="h")
postscript
？postscript
?postscript
setwd("/opt/bin/s-plot/example/point3d")
source('/opt/bin/s-plot/bin/rFunction.R')
library(plyr)
library(rgl)
library(scatterplot3d)
if ("FALSE" != "FALSE") {
sampleGroup <- read.table("FALSE",sep="\t",header=1,check.names=F,row.names=1)
sampleGroup$variable<- factor(rownames(sampleGroup))
}
if(! TRUE){
if ("FALSE" != "FALSE") {
data <- read.table(file="../../data/mtcars.txt", sep="\t", header=TRUE, quote="", check.names=F)
gene_temp=strsplit("FALSE",":")[[1]]
data_m <- as.data.frame(t(data[data[gene_temp[1]]==gene_temp[2],]),stringsAsFactors=F)
colnames(data_m)<-"value"
data_m$Sample = rownames(data_m)
data_m<- data_m[-1:-1,]
data_m$value <- as.numeric(data_m$value)
if ("FALSE" != "FALSE") {
data_m <- merge(data_m, sampleGroup, by="row.names")
}
if ("wt" == "Sample") {
print("Wainning: Because per x-axis tag contains only one data, so recommend you to use the scatterplot or lines script")
}
}else {
data <- read.table(file="../../data/mtcars.txt", sep="\t", header=TRUE, quote="", check.names=F)
data_m <- melt(data)
if ("FALSE" != "FALSE") {
data_m <-left_join(data_m,sampleGroup,by="variable")
}
}
data_m <- data_m[data_m$disp !=0 & data_m$wt & data$mpg,]
} else {
data_m <- read.table(file="../../data/mtcars.txt", sep="\t",
header=TRUE, quote="")
}
x_level <- c()
if (length(x_level) >1){
data_m$wt <- factor(data_m$wt, levels=x_level, ordered=T)
}
color_level <- c()
if ("c_t_c_t0304" != "c_t_c_t0304"){
if (length(color_level) >1){
data_m$c_t_c_t0304 <- factor(data_m$c_t_c_t0304, levels=color_level, ordered=T)
}else{
data_m$c_t_c_t0304 <- factor(data_m$c_t_c_t0304)
}
}
size_level <- c()
if ("c_t_c_t0304" != "c_t_c_t0304"){
if (length(size_level) >1){
data_m$c_t_c_t0304 <- factor(data_m$c_t_c_t0304, levels=size_level, ordered=T)
}else{
data_m$c_t_c_t0304 <- factor(data_m$c_t_c_t0304)
}
}
shape_level <- c()
if ("c_t_c_t0304" != "c_t_c_t0304"){
if (length(shape_level) >1){
data_m$c_t_c_t0304 <- factor(data_m$c_t_c_t0304, levels=shape_level, ordered=T)
}else{
data_m$c_t_c_t0304 <- factor(data_m$c_t_c_t0304)
}
}
pdf(".//mtcars.txt.point3d.pdf")
if ("FALSE" == "FALSE"){
s3d <- scatterplot3d(
x=data_m$wt,
y=data_m$disp,
z=data_m$mpg,
color=black,
pch=16,
cex.symbols=NULL,
main="",
xlab="wt",
ylab="disp",
zlab="",
type='p',
grid=TRUE,
box=TRUE
)
}else{
# 1. Empty 3D scatter plot using pch=""
source('/opt/bin/s-plot/bin/addgrids3d.R')
s3d <- scatterplot3d(
x=data_m$wt,
y=data_m$disp,
z=data_m$mpg,
pch="",
cex.symbols=NULL,
main="",
xlab="wt",
ylab="disp",
zlab="",
type='p',
grid=FALSE,
box=TRUE
)
# 2. Add grids
addgrids3d(grid = c("xy", "xz", "yz"))
# 3. Add points
s3d(
x=data_m$wt,
y=data_m$disp,
z=data_m$mpg,
color=black,
pch=16,
cex.symbols=??
type='p'
)
}
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,pch=as.numeric(mtcars$cyl),cex.symbols=NULL,type="h")
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,pch=as.numeric(mtcars$cyl),cex.symbols=NULL,type="h")
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color="black",pch=as.numeric(mtcars$cyl),cex.symbols=NULL,type="h")
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color="black",pch=as.numeric(mtcars$cyl),type="h")
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,pch=as.numeric(as.factor(mtcars$cyl)),cex.symbols=NULL,type='p')
dev.off()
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,color="black",pch=as.numeric(mtcars$cyl),type="h")
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,pch=as.numeric(mtcars$cyl),type="h")
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,pch=as.numeric(mtcars$cyl),type="h")
?planes3d()
?scatterplot3d
library(rgl)
library(scatterplot3d)
mtcars$cyl <- factor(mtcars$cyl)
scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,pch=as.numeric(mtcars$cyl),type="h")
s3d <-scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,pch=as.numeric(mtcars$cyl),type="h")
?s3d$plane3d()
?s3d$plane3d
s3d$plane3d
addgrids3d
addgrids3d()
?addgrids3d
?scatterplot3d
s3d <-scatterplot3d(mtcars$wt,mtcars$disp,mtcars$mpg,pch=as.numeric(mtcars$cyl),type="h")
?s3d$plane3d
s3d$plane3d
s3d$points3d()
s3d$points3d
?s3d$points3d
s3d$points3d
?legend
library(ggplot2)
?geom_boxplot
?segments3d
?segments
