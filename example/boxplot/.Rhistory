# stop("Value passed to cex.prop is not length 1")
func = cex.prop
if (class(cex.prop) != "function") {
if (cex.prop == "lin") {
func = function(x) x
}
else if (cex.prop == "log10") {
func = log10
}
else flog.error(paste0("Unknown value passed to cex.prop: ",
cex.prop), name = "VennDiagramLogger")
stop(paste0("Unknown value passed to cex.prop: ",
cex.prop))
}
maxArea = max(areas)
for (i in 1:length(areas)) {
cex[i] = cex[i] * func(areas[i])/func(maxArea)
if (cex[i] <= 0)
stop(paste0("Error in rescaling of area labels: the label of area ",
i, " is less than or equal to zero"))
}
}
grob.list <- gList()
ellipse.positions <- matrix(nrow = 4, ncol = 7)
colnames(ellipse.positions) <- c("x", "y", "a", "b", "rotation",
"fill.mapping", "line.mapping")
ellipse.positions[1, ] <- c(0.65, 0.47, 0.35, 0.2, 45, 2,
4)
ellipse.positions[2, ] <- c(0.35, 0.47, 0.35, 0.2, 135, 1,
1)
ellipse.positions[3, ] <- c(0.5, 0.57, 0.33, 0.15, 45, 4,
3)
ellipse.positions[4, ] <- c(0.5, 0.57, 0.35, 0.15, 135, 3,
2)
for (i in 1:4) {
grob.list <- gList(grob.list, VennDiagram::ellipse(x = ellipse.positions[i,
"x"], y = ellipse.positions[i, "y"], a = ellipse.positions[i,
"a"], b = ellipse.positions[i, "b"], rotation = ellipse.positions[i,
"rotation"], gp = gpar(lty = 0, fill = fill[ellipse.positions[i,
"fill.mapping"]], alpha = alpha[ellipse.positions[i,
"fill.mapping"]])))
}
for (i in 1:4) {
grob.list <- gList(grob.list, ellipse(x = ellipse.positions[i,
"x"], y = ellipse.positions[i, "y"], a = ellipse.positions[i,
"a"], b = ellipse.positions[i, "b"], rotation = ellipse.positions[i,
"rotation"], gp = gpar(lwd = lwd[ellipse.positions[i,
"line.mapping"]], lty = lty[ellipse.positions[i,
"line.mapping"]], col = col[ellipse.positions[i,
"line.mapping"]], fill = "transparent")))
}
label.matrix <- matrix(nrow = 15, ncol = 3)
colnames(label.matrix) <- c("label", "x", "y")
label.matrix[1, ] <- c(a1, 0.35, 0.77)
label.matrix[2, ] <- c(a2, 0.5, 0.69)
label.matrix[3, ] <- c(a3, 0.65, 0.77)
label.matrix[4, ] <- c(a4, 0.31, 0.67)
label.matrix[5, ] <- c(a5, 0.4, 0.58)
label.matrix[6, ] <- c(a6, 0.5, 0.47)
label.matrix[7, ] <- c(a7, 0.6, 0.58)
label.matrix[8, ] <- c(a8, 0.69, 0.67)
label.matrix[9, ] <- c(a9, 0.18, 0.58)
label.matrix[10, ] <- c(a10, 0.32, 0.42)
label.matrix[11, ] <- c(a11, 0.425, 0.38)
label.matrix[12, ] <- c(a12, 0.575, 0.38)
label.matrix[13, ] <- c(a13, 0.68, 0.42)
label.matrix[14, ] <- c(a14, 0.82, 0.58)
label.matrix[15, ] <- c(a15, 0.5, 0.28)
processedLabels <- rep("", length(label.matrix[, "label"]))
if (print.mode[1] == "percent") {
processedLabels <- paste(signif(label.matrix[, "label"]/sum(label.matrix[,
"label"]) * 100, digits = sigdigs), "%", sep = "")
if (isTRUE(print.mode[2] == "raw")) {
processedLabels <- paste(processedLabels, "\n(",
label.matrix[, "label"], ")", sep = "")
}
}
if (print.mode[1] == "raw") {
processedLabels <- label.matrix[, "label"]
if (isTRUE(print.mode[2] == "percent")) {
processedLabels <- paste(processedLabels, "\n(",
paste(signif(label.matrix[, "label"]/sum(label.matrix[,
"label"]) * 100, digits = sigdigs), "%)", sep = ""),
sep = "")
}
}
for (i in 1:nrow(label.matrix)) {
grob.list <- gList(grob.list, textGrob(label = processedLabels[i],
x = label.matrix[i, "x"], y = label.matrix[i, "y"],
gp = gpar(col = label.col[i], cex = cex[i], fontface = fontface[i],
fontfamily = fontfamily[i])))
}
cat.pos.x <- c(0.18, 0.82, 0.35, 0.65)
cat.pos.y <- c(0.58, 0.58, 0.77, 0.77)
for (i in 1:4) {
this.cat.pos <- find.cat.pos(x = cat.pos.x[i], y = cat.pos.y[i],
pos = cat.pos[i], dist = cat.dist[i])
grob.list <- gList(grob.list, textGrob(label = category[i],
x = this.cat.pos$x, y = this.cat.pos$y, just = cat.just[[i]],
gp = gpar(col = cat.col[i], cex = cat.cex[i], fontface = cat.fontface[i],
fontfamily = cat.fontfamily[i])))
}
grob.list <- VennDiagram::adjust.venn(VennDiagram::rotate.venn.degrees(grob.list,
rotation.degree, rotation.centre[1], rotation.centre[2]),
...)
if (ind) {
grid.draw(grob.list)
}
return(grob.list)
}
assignInNamespace("draw.quad.venn",draw.quad.venn, ns="VennDiagram")
oneName <- function() paste(sample(LETTERS,5,replace=TRUE),collapse="")
geneNames <- replicate(1000, oneName())
GroupA <- sample(geneNames, 400, replace=FALSE)
GroupB <- sample(geneNames, 750, replace=FALSE)
GroupC <- sample(geneNames, 250, replace=FALSE)
GroupD <- sample(geneNames, 300, replace=FALSE)
library(VennDiagram)
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='lin', cex=2)
source("/opt/bin/s-plot/bin/VennDiagram_revision.R")
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='lin', cex=2)
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=2)
assignInNamespace("draw.quad.venn",draw.quad.venn, ns="VennDiagram")
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=2)
assignInNamespace("draw.quad.venn",draw.quad.venn, ns="VennDiagram")
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=2)
draw.quad.venn
rm(list=ls())
library(VennDiagram)
draw.quad.venn
source("/opt/bin/s-plot/bin/VennDiagram_revision.R")
source("/opt/bin/s-plot/bin/VennDiagram_revision.R")
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=2)
oneName <- function() paste(sample(LETTERS,5,replace=TRUE),collapse="")
geneNames <- replicate(1000, oneName())
GroupA <- sample(geneNames, 400, replace=FALSE)
GroupB <- sample(geneNames, 750, replace=FALSE)
GroupC <- sample(geneNames, 250, replace=FALSE)
GroupD <- sample(geneNames, 300, replace=FALSE)
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=2)
source("/opt/bin/s-plot/bin/VennDiagram_revision.R")
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=2)
grid.newpage()
grid.draw(v1)
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='lin', cex=2)
grid.newpage()
grid.draw(v1)
draw.pairwise.venn
ls
ls()
draw.pairwise.venn
ls()
draw.triple.venn
draw.quintuple.venn
ls()
draw.quintuple.venn
source("/opt/bin/s-plot/bin/VennDiagram_revision.R")
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=2)
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=2)
grid.newpage()
grid.draw(v1)
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='log10', cex=1)
grid.newpage()
grid.draw(v1)
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop='NULL', cex=1)
v1 <- venn.diagram(list(A=GroupA, B=GroupB, C=GroupC, D=GroupD), filename=NULL, fill=rainbow(4), cex.prop=NULL, cex=1)
library(VennDiagram)
?draw.pairwise.venn()
1:10
log10(1:10)
log10(c(1:4:8))
log10(c(1,4,8))
lin(c(1,4,8))
log2(c(1,4,8))
log2(c(4,8))
log10(c(4,8))
sqrt(c(4,8))
library(scatterplot3d)
installp("ggdendro")
installp("amap")
?anova()
?aov
library(amap)
library(amap)
?hcluster()
?hclust
?sample
rep(1,10)
rep(1:10)
sample(rep(1:10),4)
sample(rep(1:10),4)
sample(rep(1:10),4)
sample(c(0,1), 100, replace = TRUE)
sample(c(0,1), 100, replace = TRUE)
sample(c(0,1), 100, replace = TRUE)
rm(list=ls())
library(ggplot2)
diamonds
diamonds['x']
diamonds[,'x']
diamonds[!'x']
diamonds[!x]
diamonds[!colnames(diamonds) %in% "x"]
diamonds[colnames(diamonds) %in% "x"]
colnames(diamonds) %in% "x"
diamonds[,colnames(diamonds) %in% "x"]
diamonds[,!colnames(diamonds) %in% "x"]
diamonds[!x]
diamonds[-"x"]
diamonds["x"]
diamonds[~"x"]
diamonds[@"x"]
diamonds[!"x"]
diamonds[-"x"]
exit()
library(tidyr)
?data
data(package="tidyr")
smiths
class(smiths)
?tidyr
library(dplyr)
tbl_df(smiths)
installp("yyplot")
library(yyplot)
install.packages("yyplot")
install.packages("yyplot")
installg("GuangchuangYu/yyplot")
library(yyplot)
library(yyplot)
names<- c("salmonella")
pubmed_trend(names,year=2010:2017)
pubmed_trend(names,year=2017)
library(yyplot)
names<- c("salmonella[AB]")
pubmed_trend(names,year=2017)
pubmed_trend(names,year=2010:2017)
names<- c("salmonella enterica[AB]")
pubmed_trend(names,year=2010:2017)
ggplot(num_sal,aes(year,number))+geom_cake()
library(ggplot2)
ggplot(num_sal,aes(year,number))+geom_cake()
num_sal<- pubmed_trend(names,year=2010:2017)
name_author <- c("Vanessa K. Wong[FAU]")
ggplot(num_sal,aes(year,number))+geom_cake()
ggplot(num_sal,aes(year,number))+geom_line()+geom_point()+theme_cin()
ggplot(num_sal,aes(year,number))+geom_line()+geom_point()+theme_cin()+ggtile("salmonella enterica")
ggplot(num_sal,aes(year,number))+geom_line()+geom_point()+theme_cin()+ggtitle("salmonella enterica")
names_abstract <- c("salmonella enterica[AB]")
num_sal<- pubmed_trend(names_abstract,year=2010:2017)
name_author <- c("Vanessa K. Wong[FAU]")
num_author <- pubmed_trend(name_author,year=2010:2017)
ggplot(num_author,aes(year,number))+geom_line()+geom_point()+theme_cin()+ggtitle("author")
names_abstract <- c("salmonella enterica[Ti],Typhi[Ti]")
num_sal<- pubmed_trend(names_abstract,year=2010:2017)
ggplot(num_sal,aes(year,number))+geom_line()+geom_point()+theme_cin()+ggtitle("salmonella enterica")
num_sal
names_abstract <- c("salmonella enterica[Ti]",'Typhi[Ti]')
num_sal<- pubmed_trend(names_abstract,year=2010:2017)
num_sal
ggplot(num_sal,aes(year,number,color=TERM))+geom_line()+geom_point()+theme_cin()+ggtitle("salmonella")
name_author <- c("Vanessa K. Wong[FAU]","Gordon Dougan[FAU]")
num_author <- pubmed_trend(name_author,year=2010:2017)
num_author
ggplot(num_author,aes(year,number,color=TERM))+geom_line()+geom_point()+theme_cin()+ggtitle("author")
?yyplot
??yyplot
names_abstract <- c("salmonella enterica[Ti] AND nature genetics[JT]",'Typhi[Ti]')
num_sal<- pubmed_trend(names_abstract,year=2010:2017)
names_abstract <- c("('salmonella enterica'[Ti]) AND 'nature genetics'[JT]","Typhi[Ti] AND 'nature genetics'[JT]")
num_sal<- pubmed_trend(names_abstract,year=2010:2017)
ggplot(num_sal,aes(year,number,color=TERM))+geom_line()+geom_point()+theme_cin()+ggtitle("salmonella")
names_abstract <- c("'salmonella enterica'[TI] AND 'nature genetics'[JT]","Typhi[TI] AND 'nature genetics'[JT]")
num_sal<- pubmed_trend(names_abstract,year=2010:2017)
ggplot(num_sal,aes(year,number,color=TERM))+geom_line()+geom_point()+theme_cin()+ggtitle("salmonella")
names_abstract <- c("'salmonella enterica'[TI]","Typhi[TI] AND 'nature genetics'[JT]")
num_sal<- pubmed_trend(names_abstract,year=2010:2017)
ggplot(num_sal,aes(year,number,color=TERM))+geom_line()+geom_point()+theme_cin()+ggtitle("salmonella")
names_abstract <- c("salmonella enterica[TI]","Typhi[TI] AND 'nature genetics'[JT]")
num_sal<- pubmed_trend(names_abstract,year=2010:2017)
ggplot(num_sal,aes(year,number,color=TERM))+geom_line()+geom_point()+theme_cin()+ggtitle("salmonella")
names_abstract <- c("salmonella enterica[TI]","Typhi[TI] AND nature genetics[JT]")
num_sal<- pubmed_trend(names_abstract,year=2010:2017)
ggplot(num_sal,aes(year,number,color=TERM))+geom_line()+geom_point()+theme_cin()+ggtitle("salmonella")
?pubmed_trend
names_abstract <- c("salmonella enterica[TI]","Typhi[TI] AND nature[JT]")
num_sal<- pubmed_trend(names_abstract,year=2010:2017)
ggplot(num_sal,aes(year,number,color=TERM))+geom_line()+geom_point()+theme_cin()+ggtitle("salmonella")
names_abstract <- c("salmonella enterica[TI]","Typhi[TI]")
library(ggplot2)
?geom_density
ggplot(diamonds, aes(carat, ..count.., fill = cut)) +
geom_density(position = "stack")
ggplot(diamonds, aes(carat, ..density.., fill = cut)) +
geom_density(position = "stack")
?geom_freqpoly
ggplot(diamonds, aes(price, ..density.., colour = cut)) +
geom_freqpoly(binwidth = 500)
library(tidyr)
?gather
mini_iris <-
iris %>%
group_by(Species) %>%
slice(1)
library(dplyr)
mini_iris <-
iris %>%
group_by(Species) %>%
slice(1)
mini_iris
mini_iris %>% gather(key = flower_att, value = measurement, -Species)
setwd("/opt/bin/s-plot/example/boxplot")
source('/opt/bin/s-plot/bin/rFunction.R')
if(FALSE || FALSE || FALSE){
library(ggbeeswarm)
}
library(ggplot2)
library(reshape2)
library(scales)
library(dplyr)
library(naturalsort)
if ("FALSE" != "FALSE") {
sampleGroup <- read.table("FALSE",sep="\t",header=1,check.names=F,row.names=1)
sampleGroup$variable <- factor(rownames(sampleGroup))
}
if(! TRUE){
if ("FALSE" != "FALSE") {
# data <- read.table(file="../../data/ToothGrowth.txt", sep="\t", header=TRUE, row.names=1, quote="", check.names=F)
data <- read.table(file="../../data/ToothGrowth.txt", sep="\t", header=TRUE, quote="", check.names=F)
gene_temp=strsplit("FALSE",":")[[1]]
data_m <- as.data.frame(t(data[data[gene_temp[1]]==gene_temp[2],]),stringsAsFactors=F)
colnames(data_m)<-"value"
data_m$Sample = rownames(data_m)
data_m<- data_m[-1:-1,]
data_m$value <- as.numeric(data_m$value)
if ("FALSE" != "FALSE") {
data_m <- merge(data_m, sampleGroup, by="row.names")
}
if ("dose" == "Sample") {
print("Wainning: Because per x-axis tag contains only one data, so recommend you to use the scatterplot or lines script")
}
}else {
data <- read.table(file="../../data/ToothGrowth.txt", sep="\t", header=TRUE, quote="", check.names=F)
if ("dose" %in% colnames(data)){
data$dose <- ordered(data$dose,unique(as.character(data$dose)))
}
if ("dose" %in% colnames(data)){
data$dose <- ordered(data$dose,unique(as.character(data$dose)))
}
data_m <- melt(data)
if ("FALSE" != "FALSE") {
# print(data_m$variable)
data_m <-left_join(data_m,sampleGroup,by="variable")
}
}
} else {
data_m <- read.table(file="../../data/ToothGrowth.txt", sep="\t",
header=TRUE, quote="")
}
if (0 != 0){
data_m$len <- data_m$len + 0
}
if("FALSE" != 'FALSE'){
data_m$len <- FALSE(data_m$len)
}
if ("" != "") {
data_m$dose <- cut(data_m$dose, )
}
if ("" != "") {
data_m$dose <- cut(data_m$dose,)
}
x_level <- c()
if (length(x_level)>1){
data_m$dose <- factor(data_m$dose,levels=x_level)
}else{
data_m$dose <- ordered(data_m$dose, levels=naturalsort(unique(data_m$dose)))
}
level_i <- c()
if (length(level_i)>1){
data_m$dose <- factor(data_m$dose, levels=level_i)
}else{
data_m$dose <- factor(data_m$dose)
}
alpha_level <- c()
if ("c_t_c_t0304" != "c_t_c_t0304"){
if (length(alpha_level) >1){
data_m$c_t_c_t0304 <- factor(data_m$c_t_c_t0304, levels=alpha_level, ordered=T)
}else{
data_m$c_t_c_t0304 <- factor(data_m$c_t_c_t0304)
}
}
data_m$len <- as.numeric(as.character(data_m$len))
data_m <- data_m[!is.na(data_m$len),]
if ("FALSE" !='FALSE'){
if (FALSE & "dose" != "dose"){
if (sum(xtabs(~dose+dose, data_m))/length(unique(data_m$dose)) == 1){
temp_sort <- data_m %>% dplyr::group_by(dose) %>% dplyr::summarise(mean=mean(len))
temp_sort <- dplyr::arrange(temp_sort, FALSEmean)
data_m$dose <- ordered(data_m$dose, as.character(temp_sort$dose))
}else{
print("Warning: because each dose do not corresponds to only one dose, so igeore sort by group")
}
}else{
if ("NoMeAnInGTh_I_n_G_s" == "dose"){
data_m$dose <- reorder(data_m$dose,FALSEdata_m$len, FUN=mean)
}else{
data_m$dose <- reorder(data_m$dose,FALSEdata_m$len, FUN=mean)
}
}
}
facet_level <- c(NA)
if ("NoMeAnInGTh_I_n_G_s" != "NoMeAnInGTh_I_n_G_s"){
if (length(facet_level) >1){
data_m$NoMeAnInGTh_I_n_G_s <- factor(data_m$NoMeAnInGTh_I_n_G_s, levels=facet_level, ordered=T)
}else{
data_m$NoMeAnInGTh_I_n_G_s <- factor(data_m$NoMeAnInGTh_I_n_G_s)
}
}
s_boxplot <- function(dat,group_va){
median_dat <- dat %>% group_by_(.dots=group_va) %>% summarise(median=median(len))
return(median_dat)
}
if ("NoMeAnInGTh_I_n_G_s" != "NoMeAnInGTh_I_n_G_s") {
data_bp_median <- s_boxplot(data_m,c("dose","dose","NoMeAnInGTh_I_n_G_s"))
} else {
data_bp_median <- s_boxplot(data_m,c("dose","dose"))
}
data_nrow=nrow(data_m)
if (data_nrow < 50) {
jitter_size=1
}else{
jitter_size=0.5
}
p <- ggplot(data_m, aes(dose, len)) + xlab("dose") +
ylab("len") + labs(title="")
if (FALSE) {
p <- p + geom_violin(aes(color=dose,fill=dose),
stat = "ydensity", position = "dodge", trim = TRUE,
scale = "width",width=0.75)
if ("dose" != "dose"){
p <- p+geom_boxplot(aes(fill=dose),color="black",size=0.4,
outlier.colour='NA', width=0.75/3,position=position_dodge(width=0.75))
}else{
p <- p+geom_boxplot(fill='white',color="black",size=0.4,
outlier.colour='NA', width=0.75/3,position=position_dodge(width=0.75))
}
} else if (FALSE) {
p <- p + geom_violin(aes(color=dose),size=0.5,
stat = "ydensity", position = "dodge", trim = TRUE,
scale = "width",width=0.75)+geom_quasirandom(size=jitter_size,alpha=0.7)
p <- p+geom_point(data=data_bp_median,aes(x=dose,y=median,group=dose,color=dose),position=position_dodge(width=0.75),size=1.5,shape=17)
} else if (FALSE) {
p <- p + geom_quasirandom(aes(color=dose),size=jitter_size)
# p <- p + geom_dotplot(aes(color=dose,fill=dose), stackdir = 'center',size=jitter_size, binaxis ='y')
p <- p + stat_summary(fun.y = "mean", geom = "text", label="----", size= 5, color= "black")
} else {
if (FALSE){
if (FALSE){
p <- p + geom_boxplot(aes(fill=dose,color=dose), notch=TRUE,width=0.75,
notchwidth=0.3, outlier.colour='NA')
}else{
p <- p + geom_boxplot(aes(fill=dose,color=dose), notch=TRUE,outlier.size=0.5, width=0.75,
notchwidth=0.3)
}
} else {
if (FALSE){
p <- p + geom_boxplot(aes(fill=dose,color=dose),
outlier.colour='NA', width=0.75)
}else{
p <- p + geom_boxplot(aes(fill=dose,color=dose),outlier.size=0.5, width=0.75)
}
}
p <- p+geom_crossbar(data=data_bp_median,aes(x=dose,y=median,ymin=median,ymax=median,group=dose),position=position_dodge(width=0.75),width=0.75,fatten=0,size=0.5,color="white")
}
if (FALSE) {
p <- p + geom_quasirandom(aes(group=dose),color='black',size=jitter_size,alpha=0.7)
}
if (FALSE) {
#ylim_zoomin <- boxplot.stats(ddata_m$len)$stats[c(1,5)]
stats <- boxplot.stats(data_m$len)$stats
ylim_zoomin <- c(stats[1]/1.05, stats[5]*1.05)
p <- p + coord_cartesian(ylim = ylim_zoomin)
}
if ("FALSE" != "FALSE") {
if(FALSE || FALSE){
p <- p +scale_colour_manual(values=c(FALSE))
}else{
p <- p + scale_fill_manual(values=c(FALSE))+scale_colour_manual(values=c(FALSE))
}
}
if (FALSE) {
p <- p + coord_flip()
}
if ("NoMeAnInGTh_I_n_G_s" != "NoMeAnInGTh_I_n_G_s") {
if("h" == 'h') {
p <- p + facet_grid( .~ NoMeAnInGTh_I_n_G_s,scales="free",space="free")
}else if("h" == 'v') {
p <- p + facet_grid( NoMeAnInGTh_I_n_G_s~. ,scales="free",space="free")
}else{
print("-M should choose one of (h,v)")
}
}
p <- p
p <- p + theme_classic2()
p <- Xlable_angle_correct(p, 0)
p <- LegendPos(p, "right")
p<- PLot_margin(p, '', 'dose', 'len')
w_h_auto <-Plot_size_final(length(unique(data_m$dose)),"FALSE","right","dose", "dose", "NoMeAnInGTh_I_n_G_s", "h", nlevels(data_m$NoMeAnInGTh_I_n_G_s))
w_auto <- w_h_auto[1]
h_auto <- w_h_auto[2]
PrintWD(FALSE,FALSE,w_auto,h_auto,FALSE)
Plot_savefig('.//ToothGrowth.txt.boxplot.x_dose.y_len.pdf', p, FALSE, FALSE, w_auto, h_auto, 300, "FALSE",ftype='pdf')
